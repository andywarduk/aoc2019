const fs = require('fs')
const path = require('path')
const GifEncoder = require('gif-encoder');
const IntCode = require('./IntCode')

const input = fs.readFileSync(path.join(__dirname, 'input13.txt'), {encoding: 'utf8'})

const mem = input.split(',').map(x => {
    return parseInt(x)
})

const sprites = {
    0: [ // Empty
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
    ],
    1: [ // Wall
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255]
    ],
    2: [ // Block
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 128, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
    ],
    3: [ // Paddle
        [255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255],
        [255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255],
        [255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255],
        [255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
    ],
    4: [ // Ball
        // ........
        // ...##...
        // ..####..
        // .######.
        // .######.
        // ..####..
        // ...##...
        // ........
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
    ],
}

runGame(mem)

function runGame(mem)
{
    const screen = []
    let inputNo = 0
    let x
    let y
    let ballX = 0
    let ballY = 0
    let batX = 0
    let batY = 0
    let batDesiredX = -1
    let track = null
    let maxX = 0
    let maxY = 0
    let gif = null
    let gifFile

    // Put in some quarters!
    mem[0] = 2

    // Execute
    IntCode.exec(false, mem, () => {
        // Move bat if rquired
        drawFrame()
        if (batDesiredX >= 0 && batX < batDesiredX) return 1
        if (batDesiredX >= 0 && batX > batDesiredX) return -1
        return 0

    }, (val) => {
        switch(inputNo) {
        case 0: // Screen X
            x = val
            break
        case 1: // Screen Y
            y = val
            break
        case 2: // Type / Score
            if (x == -1 && y == 0) {
                // Got score
            } else {
                // Got type
                if (!screen[y]) screen[y] = []

                if (y > maxY) maxY = y
                if (x > maxX) maxX = x

                screen[y][x] = val

                if (val == 4) {
                    // Ball
                    ballMoved(x, y)
                } else if (val == 3) {
                    // Bat
                    batY = y
                    batX = x
                }
            }
            break
        }

        ++inputNo
        if (inputNo == 3) inputNo = 0
    })

    gif.read();
    gif.finish();
    gifFile.end()

    function copyScreen(screen)
    {
        const copy = []

        // Copy the screen
        for (const line of screen) {
            copy.push([...line])
        }

        return copy
    }

    function calcBallMovement(x, y, xAdd, yAdd)
    {
        const upScrn = copyScreen(screen)

        function bounce()
        {
            let bounced = true
            const a = upScrn[y + yAdd][x]
            const b = upScrn[y + yAdd][x + xAdd]
            const c = upScrn[y][x + xAdd]

            let newXAdd = xAdd
            let newYAdd = yAdd

            // Colliding?
            if (a <=0 && b <= 0 && c <= 0) {
                // Not colliding
                bounced = false
            } else {
                // Colliding
                if (a <= 0 && b > 0 && c <= 0) {
                    // Diagonal bounce type 1
                    newXAdd = -xAdd
                    newYAdd = -yAdd
                    if (upScrn[y + yAdd][x + xAdd] == 2) upScrn[y + yAdd][x + xAdd] = -2
                }
                else if (a > 0 && c > 0) {
                    // Diagonal bounce type 2
                    newXAdd = -xAdd
                    newYAdd = -yAdd
                    if (upScrn[y + yAdd][x] == 2) upScrn[y + yAdd][x] = -2
                    if (upScrn[y][x + xAdd] == 2) upScrn[y][x + xAdd] = -2
                } else if (a > 0 && c <= 0) {
                    // Vertical bounce
                    newYAdd = -yAdd
                    if (upScrn[y + yAdd][x] == 2) upScrn[y + yAdd][x] = -2
                } else if (a <= 0 && c > 0) {
                    // Horizontal bounce
                    newXAdd = -xAdd
                    if (upScrn[y][x + xAdd] == 2) upScrn[y][x + xAdd] = -2
                } else {
                    console.log("Unknown bounce")
                    process.exit()
                }
            }

            // Change direction
            xAdd = newXAdd
            yAdd = newYAdd

            return bounced
        }

        // Move the ball until it reaches the bat
        track = []
        do {
            while(bounce());

            // Move ball
            upScrn[y][x] = -4
            x += xAdd
            y += yAdd
            upScrn[y][x] = 4

            track.push({x, y})
        } while (y != batY - 1)

        batDesiredX = x
    }

    function ballMoved(x, y)
    {
        if (ballX != 0 && ballY != 0 && batY != 0) {
            let xAdd = x - ballX
            let yAdd = y - ballY

            if (y == batY - 2) {
                calcBallMovement(x, y, xAdd, yAdd)
            }
        }
        ballX = x
        ballY = y
    }

    function drawFrame()
    {
        if (!gif) {
            gif = new GifEncoder((maxX + 1) * 8, (maxY + 1) * 8, {
                highWaterMark: 128 * 1024
            });
            gifFile = require('fs').createWriteStream('day13.gif');
            gif.pipe(gifFile);
            gif.writeHeader();
        }

        let pixels = []
        for (let y = 0; y <= maxY; y++) {
            for (let l = 0; l < 8; l++) {
                for (let x = 0; x <= maxX; x++) {
                    for (let p = 0; p < 8 * 4; p++) {
                        let sprite = sprites[screen[y][x]]
                        pixels.push(sprite[l][p])
                    }
                }
            }
        }

        gif.read();
        gif.addFrame(pixels);
    }

}
