const fs = require('fs')
const path = require('path')
const GifEncoder = require('gif-encoder');
const IntCode = require('./IntCode')

// Load program
const input = fs.readFileSync(path.join(__dirname, 'input15.txt'), {encoding: 'utf8'})

const mem = input.split(',').map(x => {
    return parseInt(x)
})

const sprites = {
    0: [ // Wall
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255],
        [0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255, 0, 255, 255, 255]
    ],
    1: [ // Empty
        [100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255],
        [100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255],
        [100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255],
        [100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255],
        [100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255],
        [100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255],
        [100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255],
        [100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255, 100, 100, 100, 255],
    ],
    2: [ // Oxygen
        // ........
        // ...##...
        // ..####..
        // .######.
        // .######.
        // ..####..
        // ...##...
        // ........
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
    ],
    10: [ // Unknown
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
        [0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255, 0, 0, 0, 255],
    ],
    12: [ // Touched
        [180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255],
        [180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255],
        [180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255],
        [180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255],
        [180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255],
        [180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255],
        [180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255],
        [180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255, 180, 0, 0, 255],
    ],
}

explore(mem)

function explore(mem)
{
    let x = 40
    let y = 40
    let startX = x
    let startY = y
    let minX = x
    let maxX = x
    let minY = y
    let maxY = y
    let oxX
    let oxY

    let route = {}

    const dungeon = []
    let dir

    function getLoc(x, y)
    {
        if (dungeon[y] === undefined) {
            dungeon[y] = []
            return -1
        }

        if (dungeon[y][x] === undefined) {
            return -1
        }

        return dungeon[y][x]
    }

    dungeon[y] = []
    dungeon[y][x] = 1

    // Start GIF
    const gif = new GifEncoder(41 * 8, 41 * 8, {
        highWaterMark: 128 * 1024
    });
    const gifFile = require('fs').createWriteStream('day15-2.gif');
    gif.pipe(gifFile);
    gif.writeHeader();

    // Execute
    IntCode.exec(false, mem, () => {
        if (route.N === undefined && getLoc(x, y - 1) == -1) {
            dir = 1
        } else if (route.E === undefined && getLoc(x + 1, y) == -1) {
            dir = 4
        } else if (route.S === undefined && getLoc(x, y + 1) == -1) {
            dir = 2
        } else if (route.W === undefined && getLoc(x - 1, y) == -1) {
            dir = 3
        } else {
            if (route.parent == undefined) {
                return 'interrupt'
            } else {
                dir = route.parentDir
            }
        }

        return dir

    }, (val) => {
        let yAdd
        let xAdd
        let dirName

        switch (dir) {
        case 1:
            xAdd = 0
            yAdd = -1
            dirName = 'N'
            break
        case 4:
            xAdd = 1
            yAdd = 0
            dirName = 'E'
            break
        case 2:
            xAdd = 0
            yAdd = 1
            dirName = 'S'
            break
        case 3:
            xAdd = -1
            yAdd = 0
            dirName = 'W'
            break
        }

        if (val == 2) {
            // Oxygen system
            oxX = x
            oxY = y
        }

        dungeon[y + yAdd][x + xAdd] = val

        switch (val) {
        case 0:
            // Wall
            minX = Math.min(x + xAdd, minX)
            maxX = Math.max(x + xAdd, maxX)
            minY = Math.min(y + yAdd, minY)
            maxY = Math.max(y + yAdd, maxY)
            route[dirName] = 0
            break

        default:
            // Open
            x += xAdd
            y += yAdd

            if (x < 0 || y < 0) {
                console.log("Dungeon too small")
                process.exit()
            }

            minX = Math.min(x, minX)
            maxX = Math.max(x, maxX)
            minY = Math.min(y, minY)
            maxY = Math.max(y, maxY)

            if (dir == route.parentDir) {
                route = route.parent
            } else {
                route[dirName] = {}
                route[dirName].parent = route
                switch (dir) {
                case 1:
                    route[dirName].parentDir = 2
                    break
                case 2:
                    route[dirName].parentDir = 1
                    break
                case 3:
                    route[dirName].parentDir = 4
                    break
                case 4:
                    route[dirName].parentDir = 3
                    break
                }
                route = route[dirName]
            }

            break

        }
    })

    dungeon[y][x] = 12
    walkToOxygen(startX, startY, oxX, oxY)

    // Finish GIF
    gif.read()
    gif.finish()
    gifFile.end()
    gifFile.close()


    function walkToOxygen(x1, y1, x2, y2)
    {
        let res

        function walk(x, y, from)
        {
            let res

            let save = dungeon[y][x]
            dungeon[y][x] = 12

            drawFrame()

            if (x == x2 && y == y2) {
                // Found
                return [true, 1]
            }

            if (from != 'S' && dungeon[y - 1][x] != 0) {
                res = walk(x, y - 1, 'N')
                if (res[0]) return [true, res[1] + 1]
            }
            if (from != 'W' && dungeon[y][x + 1] != 0) {
                res = walk(x + 1, y, 'E')
                if (res[0]) return [true, res[1] + 1]
            }
            if (from != 'N' && dungeon[y + 1][x] != 0) {
                res = walk(x, y + 1, 'S')
                if (res[0]) return [true, res[1] + 1]
            }
            if (from != 'E' && dungeon[y][x - 1] != 0) {
                res = walk(x - 1, y, 'W')
                if (res[0]) return [true, res[1] + 1]
            }

            dungeon[y][x] = save

            drawFrame()

            return [false, 0]
        }

        res = walk(x1, y1, ' ')

        if (!res[0]) {
            console.log("Not found!")
            process.exit()
        }

        return res[1]
    }

    function drawFrame()
    {
        // Plot 19,19 -> 59,59
        let pixels = []
        for (let gy = 19; gy <= 59; gy++) {
            for (let l = 0; l < 8; l++) {
                for (let gx = 19; gx <= 59; gx++) {
                    let val
                    if (dungeon[gy] === undefined) val = 10
                    else {
                        val = dungeon[gy][gx]
                        if (val === undefined) val = 10
                    }

                    let sprite = sprites[val]

                    for (let p = 0; p < 8 * 4; p++) {
                        pixels.push(sprite[l][p])
                    }
                }
            }
        }

        gif.read();
        gif.addFrame(pixels);
    }

}